//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `PathSmoother.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __PathSmoother_h__
#define __PathSmoother_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompPathSmoother
{

class PathSmoother;
class PathSmootherPrx;

}

namespace RoboCompPathSmoother
{

struct PathPoint
{
    float x;
    float y;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y);
    }
};

using Path = ::std::vector<PathPoint>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompPathSmoother
{

class PathSmoother : public virtual ::Ice::Object
{
public:

    using ProxyType = PathSmootherPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Path smoothPath(Path toSmoothPath, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_smoothPath(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompPathSmoother
{

class PathSmootherPrx : public virtual ::Ice::Proxy<PathSmootherPrx, ::Ice::ObjectPrx>
{
public:

    Path smoothPath(const Path& toSmoothPath, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompPathSmoother::Path>(true, this, &PathSmootherPrx::_iceI_smoothPath, toSmoothPath, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto smoothPathAsync(const Path& toSmoothPath, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompPathSmoother::Path>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompPathSmoother::Path, P>(false, this, &PathSmootherPrx::_iceI_smoothPath, toSmoothPath, context);
    }

    ::std::function<void()>
    smoothPathAsync(const Path& toSmoothPath,
                    ::std::function<void(::RoboCompPathSmoother::Path)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompPathSmoother::Path>(response, ex, sent, this, &RoboCompPathSmoother::PathSmootherPrx::_iceI_smoothPath, toSmoothPath, context);
    }

    /// \cond INTERNAL
    void _iceI_smoothPath(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompPathSmoother::Path>>&, const Path&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    PathSmootherPrx() = default;
    friend ::std::shared_ptr<PathSmootherPrx> IceInternal::createProxy<PathSmootherPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompPathSmoother::PathPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompPathSmoother::PathPoint, S>
{
    static void read(S* istr, ::RoboCompPathSmoother::PathPoint& v)
    {
        istr->readAll(v.x, v.y);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompPathSmoother
{

using PathSmootherPtr = ::std::shared_ptr<PathSmoother>;
using PathSmootherPrxPtr = ::std::shared_ptr<PathSmootherPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompPathSmoother
{

class PathSmoother;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< PathSmoother>&);
::IceProxy::Ice::Object* upCast(PathSmoother*);
/// \endcond

}

}

namespace RoboCompPathSmoother
{

class PathSmoother;
/// \cond INTERNAL
::Ice::Object* upCast(PathSmoother*);
/// \endcond
typedef ::IceInternal::Handle< PathSmoother> PathSmootherPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPathSmoother::PathSmoother> PathSmootherPrx;
typedef PathSmootherPrx PathSmootherPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(PathSmootherPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompPathSmoother
{

struct PathPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
};

typedef ::std::vector<PathPoint> Path;

}

namespace RoboCompPathSmoother
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompPathSmoother::PathSmoother::begin_smoothPath.
 * Create a wrapper instance by calling ::RoboCompPathSmoother::newCallback_PathSmoother_smoothPath.
 */
class Callback_PathSmoother_smoothPath_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PathSmoother_smoothPath_Base> Callback_PathSmoother_smoothPathPtr;

}

namespace IceProxy
{

namespace RoboCompPathSmoother
{

class PathSmoother : public virtual ::Ice::Proxy<PathSmoother, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompPathSmoother::Path smoothPath(const ::RoboCompPathSmoother::Path& toSmoothPath, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_smoothPath(_iceI_begin_smoothPath(toSmoothPath, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_smoothPath(const ::RoboCompPathSmoother::Path& toSmoothPath, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_smoothPath(toSmoothPath, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_smoothPath(const ::RoboCompPathSmoother::Path& toSmoothPath, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_smoothPath(toSmoothPath, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_smoothPath(const ::RoboCompPathSmoother::Path& toSmoothPath, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_smoothPath(toSmoothPath, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_smoothPath(const ::RoboCompPathSmoother::Path& toSmoothPath, const ::RoboCompPathSmoother::Callback_PathSmoother_smoothPathPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_smoothPath(toSmoothPath, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_smoothPath(const ::RoboCompPathSmoother::Path& toSmoothPath, const ::Ice::Context& context, const ::RoboCompPathSmoother::Callback_PathSmoother_smoothPathPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_smoothPath(toSmoothPath, context, cb, cookie);
    }

    ::RoboCompPathSmoother::Path end_smoothPath(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_smoothPath(const ::RoboCompPathSmoother::Path&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompPathSmoother
{

class PathSmoother : public virtual ::Ice::Object
{
public:

    typedef PathSmootherPrx ProxyType;
    typedef PathSmootherPtr PointerType;

    virtual ~PathSmoother();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Path smoothPath(const Path& toSmoothPath, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_smoothPath(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const PathSmoother& lhs, const PathSmoother& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const PathSmoother& lhs, const PathSmoother& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompPathSmoother::PathPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompPathSmoother::PathPoint, S>
{
    static void write(S* ostr, const ::RoboCompPathSmoother::PathPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPathSmoother::PathPoint, S>
{
    static void read(S* istr, ::RoboCompPathSmoother::PathPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
    }
};

}
/// \endcond

namespace RoboCompPathSmoother
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompPathSmoother::PathSmoother::begin_smoothPath.
 * Create a wrapper instance by calling ::RoboCompPathSmoother::newCallback_PathSmoother_smoothPath.
 */
template<class T>
class CallbackNC_PathSmoother_smoothPath : public Callback_PathSmoother_smoothPath_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Path&);

    CallbackNC_PathSmoother_smoothPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        PathSmootherPrx proxy = PathSmootherPrx::uncheckedCast(result->getProxy());
        Path ret;
        try
        {
            ret = proxy->end_smoothPath(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPathSmoother::PathSmoother::begin_smoothPath.
 */
template<class T> Callback_PathSmoother_smoothPathPtr
newCallback_PathSmoother_smoothPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const Path&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PathSmoother_smoothPath<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPathSmoother::PathSmoother::begin_smoothPath.
 */
template<class T> Callback_PathSmoother_smoothPathPtr
newCallback_PathSmoother_smoothPath(T* instance, void (T::*cb)(const Path&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PathSmoother_smoothPath<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompPathSmoother::PathSmoother::begin_smoothPath.
 * Create a wrapper instance by calling ::RoboCompPathSmoother::newCallback_PathSmoother_smoothPath.
 */
template<class T, typename CT>
class Callback_PathSmoother_smoothPath : public Callback_PathSmoother_smoothPath_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Path&, const CT&);

    Callback_PathSmoother_smoothPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        PathSmootherPrx proxy = PathSmootherPrx::uncheckedCast(result->getProxy());
        Path ret;
        try
        {
            ret = proxy->end_smoothPath(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPathSmoother::PathSmoother::begin_smoothPath.
 */
template<class T, typename CT> Callback_PathSmoother_smoothPathPtr
newCallback_PathSmoother_smoothPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const Path&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PathSmoother_smoothPath<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompPathSmoother::PathSmoother::begin_smoothPath.
 */
template<class T, typename CT> Callback_PathSmoother_smoothPathPtr
newCallback_PathSmoother_smoothPath(T* instance, void (T::*cb)(const Path&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PathSmoother_smoothPath<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
