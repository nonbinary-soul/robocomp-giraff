//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `HumanCameraBody.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __HumanCameraBody_h__
#define __HumanCameraBody_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompHumanCameraBody
{

class HumanCameraBody;
class HumanCameraBodyPrx;

}

namespace RoboCompHumanCameraBody
{

using DescriptorFloat = ::std::vector<float>;

using DescriptorByte = ::std::vector<::Ice::Byte>;

using DescByteList = ::std::vector<DescriptorByte>;

using DescFloatList = ::std::vector<DescriptorFloat>;

using ImgType = ::std::vector<::Ice::Byte>;

struct TImage
{
    int width;
    int height;
    ::RoboCompHumanCameraBody::ImgType image;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const ::RoboCompHumanCameraBody::ImgType&> ice_tuple() const
    {
        return std::tie(width, height, image);
    }
};

struct TGroundTruth
{
    float x;
    float y;
    float z;
    float rx;
    float ry;
    float rz;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, rx, ry, rz);
    }
};

using GroundTruth = ::std::vector<TGroundTruth>;

struct KeyPoint
{
    float x;
    float y;
    float z;
    int i;
    int j;
    float xw;
    float yw;
    float zw;
    float score;
    ::RoboCompHumanCameraBody::DescFloatList floatdesclist;
    ::RoboCompHumanCameraBody::DescByteList bytedesclist;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const int&, const int&, const float&, const float&, const float&, const float&, const ::RoboCompHumanCameraBody::DescFloatList&, const ::RoboCompHumanCameraBody::DescByteList&> ice_tuple() const
    {
        return std::tie(x, y, z, i, j, xw, yw, zw, score, floatdesclist, bytedesclist);
    }
};

using TJoints = ::std::map<::std::string, KeyPoint>;

struct Person
{
    int id;
    ::RoboCompHumanCameraBody::TJoints joints;
    ::RoboCompHumanCameraBody::TImage roi;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::RoboCompHumanCameraBody::TJoints&, const ::RoboCompHumanCameraBody::TImage&> ice_tuple() const
    {
        return std::tie(id, joints, roi);
    }
};

using People = ::std::vector<Person>;

struct PeopleData
{
    int cameraId;
    long long int timestamp;
    ::RoboCompHumanCameraBody::People peoplelist;
    ::RoboCompHumanCameraBody::GroundTruth gt;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const long long int&, const ::RoboCompHumanCameraBody::People&, const ::RoboCompHumanCameraBody::GroundTruth&> ice_tuple() const
    {
        return std::tie(cameraId, timestamp, peoplelist, gt);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompHumanCameraBody
{

class HumanCameraBody : public virtual ::Ice::Object
{
public:

    using ProxyType = HumanCameraBodyPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual PeopleData newPeopleData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_newPeopleData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompHumanCameraBody
{

class HumanCameraBodyPrx : public virtual ::Ice::Proxy<HumanCameraBodyPrx, ::Ice::ObjectPrx>
{
public:

    PeopleData newPeopleData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompHumanCameraBody::PeopleData>(true, this, &HumanCameraBodyPrx::_iceI_newPeopleData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto newPeopleDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompHumanCameraBody::PeopleData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompHumanCameraBody::PeopleData, P>(false, this, &HumanCameraBodyPrx::_iceI_newPeopleData, context);
    }

    ::std::function<void()>
    newPeopleDataAsync(::std::function<void(::RoboCompHumanCameraBody::PeopleData)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompHumanCameraBody::PeopleData>(response, ex, sent, this, &RoboCompHumanCameraBody::HumanCameraBodyPrx::_iceI_newPeopleData, context);
    }

    /// \cond INTERNAL
    void _iceI_newPeopleData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompHumanCameraBody::PeopleData>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    HumanCameraBodyPrx() = default;
    friend ::std::shared_ptr<HumanCameraBodyPrx> IceInternal::createProxy<HumanCameraBodyPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompHumanCameraBody::TImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompHumanCameraBody::TImage, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::TImage& v)
    {
        istr->readAll(v.width, v.height, v.image);
    }
};

template<>
struct StreamableTraits<::RoboCompHumanCameraBody::TGroundTruth>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompHumanCameraBody::TGroundTruth, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::TGroundTruth& v)
    {
        istr->readAll(v.x, v.y, v.z, v.rx, v.ry, v.rz);
    }
};

template<>
struct StreamableTraits<::RoboCompHumanCameraBody::KeyPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompHumanCameraBody::KeyPoint, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::KeyPoint& v)
    {
        istr->readAll(v.x, v.y, v.z, v.i, v.j, v.xw, v.yw, v.zw, v.score, v.floatdesclist, v.bytedesclist);
    }
};

template<>
struct StreamableTraits<::RoboCompHumanCameraBody::Person>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompHumanCameraBody::Person, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::Person& v)
    {
        istr->readAll(v.id, v.joints, v.roi);
    }
};

template<>
struct StreamableTraits<::RoboCompHumanCameraBody::PeopleData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompHumanCameraBody::PeopleData, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::PeopleData& v)
    {
        istr->readAll(v.cameraId, v.timestamp, v.peoplelist, v.gt);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompHumanCameraBody
{

using HumanCameraBodyPtr = ::std::shared_ptr<HumanCameraBody>;
using HumanCameraBodyPrxPtr = ::std::shared_ptr<HumanCameraBodyPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompHumanCameraBody
{

class HumanCameraBody;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< HumanCameraBody>&);
::IceProxy::Ice::Object* upCast(HumanCameraBody*);
/// \endcond

}

}

namespace RoboCompHumanCameraBody
{

class HumanCameraBody;
/// \cond INTERNAL
::Ice::Object* upCast(HumanCameraBody*);
/// \endcond
typedef ::IceInternal::Handle< HumanCameraBody> HumanCameraBodyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompHumanCameraBody::HumanCameraBody> HumanCameraBodyPrx;
typedef HumanCameraBodyPrx HumanCameraBodyPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(HumanCameraBodyPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompHumanCameraBody
{

typedef ::std::vector< ::Ice::Float> DescriptorFloat;

typedef ::std::vector< ::Ice::Byte> DescriptorByte;

typedef ::std::vector<DescriptorByte> DescByteList;

typedef ::std::vector<DescriptorFloat> DescFloatList;

typedef ::std::vector< ::Ice::Byte> ImgType;

struct TImage
{
    ::Ice::Int width;
    ::Ice::Int height;
    ::RoboCompHumanCameraBody::ImgType image;
};

struct TGroundTruth
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;
};

typedef ::std::vector<TGroundTruth> GroundTruth;

struct KeyPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Int i;
    ::Ice::Int j;
    ::Ice::Float xw;
    ::Ice::Float yw;
    ::Ice::Float zw;
    ::Ice::Float score;
    ::RoboCompHumanCameraBody::DescFloatList floatdesclist;
    ::RoboCompHumanCameraBody::DescByteList bytedesclist;
};

typedef ::std::map< ::std::string, KeyPoint> TJoints;

struct Person
{
    ::Ice::Int id;
    ::RoboCompHumanCameraBody::TJoints joints;
    ::RoboCompHumanCameraBody::TImage roi;
};

typedef ::std::vector<Person> People;

struct PeopleData
{
    ::Ice::Int cameraId;
    ::Ice::Long timestamp;
    ::RoboCompHumanCameraBody::People peoplelist;
    ::RoboCompHumanCameraBody::GroundTruth gt;
};

}

namespace RoboCompHumanCameraBody
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompHumanCameraBody::HumanCameraBody::begin_newPeopleData.
 * Create a wrapper instance by calling ::RoboCompHumanCameraBody::newCallback_HumanCameraBody_newPeopleData.
 */
class Callback_HumanCameraBody_newPeopleData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanCameraBody_newPeopleData_Base> Callback_HumanCameraBody_newPeopleDataPtr;

}

namespace IceProxy
{

namespace RoboCompHumanCameraBody
{

class HumanCameraBody : public virtual ::Ice::Proxy<HumanCameraBody, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompHumanCameraBody::PeopleData newPeopleData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_newPeopleData(_iceI_begin_newPeopleData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_newPeopleData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_newPeopleData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newPeopleData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newPeopleData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newPeopleData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newPeopleData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newPeopleData(const ::RoboCompHumanCameraBody::Callback_HumanCameraBody_newPeopleDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newPeopleData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newPeopleData(const ::Ice::Context& context, const ::RoboCompHumanCameraBody::Callback_HumanCameraBody_newPeopleDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newPeopleData(context, cb, cookie);
    }

    ::RoboCompHumanCameraBody::PeopleData end_newPeopleData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_newPeopleData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompHumanCameraBody
{

class HumanCameraBody : public virtual ::Ice::Object
{
public:

    typedef HumanCameraBodyPrx ProxyType;
    typedef HumanCameraBodyPtr PointerType;

    virtual ~HumanCameraBody();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual PeopleData newPeopleData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_newPeopleData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const HumanCameraBody& lhs, const HumanCameraBody& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const HumanCameraBody& lhs, const HumanCameraBody& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompHumanCameraBody::TImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanCameraBody::TImage, S>
{
    static void write(S* ostr, const ::RoboCompHumanCameraBody::TImage& v)
    {
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.image);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanCameraBody::TImage, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::TImage& v)
    {
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.image);
    }
};

template<>
struct StreamableTraits< ::RoboCompHumanCameraBody::TGroundTruth>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanCameraBody::TGroundTruth, S>
{
    static void write(S* ostr, const ::RoboCompHumanCameraBody::TGroundTruth& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.rx);
        ostr->write(v.ry);
        ostr->write(v.rz);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanCameraBody::TGroundTruth, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::TGroundTruth& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.rx);
        istr->read(v.ry);
        istr->read(v.rz);
    }
};

template<>
struct StreamableTraits< ::RoboCompHumanCameraBody::KeyPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanCameraBody::KeyPoint, S>
{
    static void write(S* ostr, const ::RoboCompHumanCameraBody::KeyPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.i);
        ostr->write(v.j);
        ostr->write(v.xw);
        ostr->write(v.yw);
        ostr->write(v.zw);
        ostr->write(v.score);
        ostr->write(v.floatdesclist);
        ostr->write(v.bytedesclist);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanCameraBody::KeyPoint, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::KeyPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.i);
        istr->read(v.j);
        istr->read(v.xw);
        istr->read(v.yw);
        istr->read(v.zw);
        istr->read(v.score);
        istr->read(v.floatdesclist);
        istr->read(v.bytedesclist);
    }
};

template<>
struct StreamableTraits< ::RoboCompHumanCameraBody::Person>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanCameraBody::Person, S>
{
    static void write(S* ostr, const ::RoboCompHumanCameraBody::Person& v)
    {
        ostr->write(v.id);
        ostr->write(v.joints);
        ostr->write(v.roi);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanCameraBody::Person, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::Person& v)
    {
        istr->read(v.id);
        istr->read(v.joints);
        istr->read(v.roi);
    }
};

template<>
struct StreamableTraits< ::RoboCompHumanCameraBody::PeopleData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanCameraBody::PeopleData, S>
{
    static void write(S* ostr, const ::RoboCompHumanCameraBody::PeopleData& v)
    {
        ostr->write(v.cameraId);
        ostr->write(v.timestamp);
        ostr->write(v.peoplelist);
        ostr->write(v.gt);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanCameraBody::PeopleData, S>
{
    static void read(S* istr, ::RoboCompHumanCameraBody::PeopleData& v)
    {
        istr->read(v.cameraId);
        istr->read(v.timestamp);
        istr->read(v.peoplelist);
        istr->read(v.gt);
    }
};

}
/// \endcond

namespace RoboCompHumanCameraBody
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompHumanCameraBody::HumanCameraBody::begin_newPeopleData.
 * Create a wrapper instance by calling ::RoboCompHumanCameraBody::newCallback_HumanCameraBody_newPeopleData.
 */
template<class T>
class CallbackNC_HumanCameraBody_newPeopleData : public Callback_HumanCameraBody_newPeopleData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const PeopleData&);

    CallbackNC_HumanCameraBody_newPeopleData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        HumanCameraBodyPrx proxy = HumanCameraBodyPrx::uncheckedCast(result->getProxy());
        PeopleData ret;
        try
        {
            ret = proxy->end_newPeopleData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanCameraBody::HumanCameraBody::begin_newPeopleData.
 */
template<class T> Callback_HumanCameraBody_newPeopleDataPtr
newCallback_HumanCameraBody_newPeopleData(const IceUtil::Handle<T>& instance, void (T::*cb)(const PeopleData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanCameraBody_newPeopleData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanCameraBody::HumanCameraBody::begin_newPeopleData.
 */
template<class T> Callback_HumanCameraBody_newPeopleDataPtr
newCallback_HumanCameraBody_newPeopleData(T* instance, void (T::*cb)(const PeopleData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanCameraBody_newPeopleData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompHumanCameraBody::HumanCameraBody::begin_newPeopleData.
 * Create a wrapper instance by calling ::RoboCompHumanCameraBody::newCallback_HumanCameraBody_newPeopleData.
 */
template<class T, typename CT>
class Callback_HumanCameraBody_newPeopleData : public Callback_HumanCameraBody_newPeopleData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const PeopleData&, const CT&);

    Callback_HumanCameraBody_newPeopleData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        HumanCameraBodyPrx proxy = HumanCameraBodyPrx::uncheckedCast(result->getProxy());
        PeopleData ret;
        try
        {
            ret = proxy->end_newPeopleData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanCameraBody::HumanCameraBody::begin_newPeopleData.
 */
template<class T, typename CT> Callback_HumanCameraBody_newPeopleDataPtr
newCallback_HumanCameraBody_newPeopleData(const IceUtil::Handle<T>& instance, void (T::*cb)(const PeopleData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanCameraBody_newPeopleData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanCameraBody::HumanCameraBody::begin_newPeopleData.
 */
template<class T, typename CT> Callback_HumanCameraBody_newPeopleDataPtr
newCallback_HumanCameraBody_newPeopleData(T* instance, void (T::*cb)(const PeopleData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanCameraBody_newPeopleData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
