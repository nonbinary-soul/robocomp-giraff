//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `RealSenseFaceID.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RealSenseFaceID_h__
#define __RealSenseFaceID_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompRealSenseFaceID
{

class RealSenseFaceID;
class RealSenseFaceIDPrx;

}

namespace RoboCompRealSenseFaceID
{

struct UserData
{
    ::std::string userAuthenticated;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(userAuthenticated);
    }
};

using UserDataList = ::std::vector<UserData>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompRealSenseFaceID
{

class RealSenseFaceID : public virtual ::Ice::Object
{
public:

    using ProxyType = RealSenseFaceIDPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual UserDataList authenticate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_authenticate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool enroll(::std::string user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_enroll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool eraseAll(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_eraseAll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool eraseUser(::std::string user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_eraseUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual UserDataList getQueryUsers(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getQueryUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool startPreview(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startPreview(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool stopPreview(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stopPreview(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompRealSenseFaceID
{

class RealSenseFaceIDPrx : public virtual ::Ice::Proxy<RealSenseFaceIDPrx, ::Ice::ObjectPrx>
{
public:

    UserDataList authenticate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompRealSenseFaceID::UserDataList>(true, this, &RealSenseFaceIDPrx::_iceI_authenticate, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto authenticateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRealSenseFaceID::UserDataList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRealSenseFaceID::UserDataList, P>(false, this, &RealSenseFaceIDPrx::_iceI_authenticate, context);
    }

    ::std::function<void()>
    authenticateAsync(::std::function<void(::RoboCompRealSenseFaceID::UserDataList)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRealSenseFaceID::UserDataList>(response, ex, sent, this, &RoboCompRealSenseFaceID::RealSenseFaceIDPrx::_iceI_authenticate, context);
    }

    /// \cond INTERNAL
    void _iceI_authenticate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRealSenseFaceID::UserDataList>>&, const ::Ice::Context&);
    /// \endcond

    bool enroll(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RealSenseFaceIDPrx::_iceI_enroll, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto enrollAsync(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RealSenseFaceIDPrx::_iceI_enroll, user, context);
    }

    ::std::function<void()>
    enrollAsync(const ::std::string& user,
                ::std::function<void(bool)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompRealSenseFaceID::RealSenseFaceIDPrx::_iceI_enroll, user, context);
    }

    /// \cond INTERNAL
    void _iceI_enroll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    bool eraseAll(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RealSenseFaceIDPrx::_iceI_eraseAll, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto eraseAllAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RealSenseFaceIDPrx::_iceI_eraseAll, context);
    }

    ::std::function<void()>
    eraseAllAsync(::std::function<void(bool)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompRealSenseFaceID::RealSenseFaceIDPrx::_iceI_eraseAll, context);
    }

    /// \cond INTERNAL
    void _iceI_eraseAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool eraseUser(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RealSenseFaceIDPrx::_iceI_eraseUser, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto eraseUserAsync(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RealSenseFaceIDPrx::_iceI_eraseUser, user, context);
    }

    ::std::function<void()>
    eraseUserAsync(const ::std::string& user,
                   ::std::function<void(bool)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompRealSenseFaceID::RealSenseFaceIDPrx::_iceI_eraseUser, user, context);
    }

    /// \cond INTERNAL
    void _iceI_eraseUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    UserDataList getQueryUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompRealSenseFaceID::UserDataList>(true, this, &RealSenseFaceIDPrx::_iceI_getQueryUsers, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getQueryUsersAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRealSenseFaceID::UserDataList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRealSenseFaceID::UserDataList, P>(false, this, &RealSenseFaceIDPrx::_iceI_getQueryUsers, context);
    }

    ::std::function<void()>
    getQueryUsersAsync(::std::function<void(::RoboCompRealSenseFaceID::UserDataList)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRealSenseFaceID::UserDataList>(response, ex, sent, this, &RoboCompRealSenseFaceID::RealSenseFaceIDPrx::_iceI_getQueryUsers, context);
    }

    /// \cond INTERNAL
    void _iceI_getQueryUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRealSenseFaceID::UserDataList>>&, const ::Ice::Context&);
    /// \endcond

    bool startPreview(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RealSenseFaceIDPrx::_iceI_startPreview, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startPreviewAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RealSenseFaceIDPrx::_iceI_startPreview, context);
    }

    ::std::function<void()>
    startPreviewAsync(::std::function<void(bool)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompRealSenseFaceID::RealSenseFaceIDPrx::_iceI_startPreview, context);
    }

    /// \cond INTERNAL
    void _iceI_startPreview(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool stopPreview(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RealSenseFaceIDPrx::_iceI_stopPreview, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopPreviewAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RealSenseFaceIDPrx::_iceI_stopPreview, context);
    }

    ::std::function<void()>
    stopPreviewAsync(::std::function<void(bool)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompRealSenseFaceID::RealSenseFaceIDPrx::_iceI_stopPreview, context);
    }

    /// \cond INTERNAL
    void _iceI_stopPreview(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    RealSenseFaceIDPrx() = default;
    friend ::std::shared_ptr<RealSenseFaceIDPrx> IceInternal::createProxy<RealSenseFaceIDPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompRealSenseFaceID::UserData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompRealSenseFaceID::UserData, S>
{
    static void read(S* istr, ::RoboCompRealSenseFaceID::UserData& v)
    {
        istr->readAll(v.userAuthenticated);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompRealSenseFaceID
{

using RealSenseFaceIDPtr = ::std::shared_ptr<RealSenseFaceID>;
using RealSenseFaceIDPrxPtr = ::std::shared_ptr<RealSenseFaceIDPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompRealSenseFaceID
{

class RealSenseFaceID;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< RealSenseFaceID>&);
::IceProxy::Ice::Object* upCast(RealSenseFaceID*);
/// \endcond

}

}

namespace RoboCompRealSenseFaceID
{

class RealSenseFaceID;
/// \cond INTERNAL
::Ice::Object* upCast(RealSenseFaceID*);
/// \endcond
typedef ::IceInternal::Handle< RealSenseFaceID> RealSenseFaceIDPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID> RealSenseFaceIDPrx;
typedef RealSenseFaceIDPrx RealSenseFaceIDPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(RealSenseFaceIDPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompRealSenseFaceID
{

struct UserData
{
    ::std::string userAuthenticated;

    bool operator==(const UserData& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(userAuthenticated != rhs_.userAuthenticated)
        {
            return false;
        }
        return true;
    }

    bool operator<(const UserData& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(userAuthenticated < rhs_.userAuthenticated)
        {
            return true;
        }
        else if(rhs_.userAuthenticated < userAuthenticated)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const UserData& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const UserData& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const UserData& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const UserData& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<UserData> UserDataList;

}

namespace RoboCompRealSenseFaceID
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_authenticate.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_authenticate.
 */
class Callback_RealSenseFaceID_authenticate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RealSenseFaceID_authenticate_Base> Callback_RealSenseFaceID_authenticatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_enroll.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_enroll.
 */
class Callback_RealSenseFaceID_enroll_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RealSenseFaceID_enroll_Base> Callback_RealSenseFaceID_enrollPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseAll.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_eraseAll.
 */
class Callback_RealSenseFaceID_eraseAll_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RealSenseFaceID_eraseAll_Base> Callback_RealSenseFaceID_eraseAllPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseUser.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_eraseUser.
 */
class Callback_RealSenseFaceID_eraseUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RealSenseFaceID_eraseUser_Base> Callback_RealSenseFaceID_eraseUserPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_getQueryUsers.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_getQueryUsers.
 */
class Callback_RealSenseFaceID_getQueryUsers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RealSenseFaceID_getQueryUsers_Base> Callback_RealSenseFaceID_getQueryUsersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_startPreview.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_startPreview.
 */
class Callback_RealSenseFaceID_startPreview_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RealSenseFaceID_startPreview_Base> Callback_RealSenseFaceID_startPreviewPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_stopPreview.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_stopPreview.
 */
class Callback_RealSenseFaceID_stopPreview_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RealSenseFaceID_stopPreview_Base> Callback_RealSenseFaceID_stopPreviewPtr;

}

namespace IceProxy
{

namespace RoboCompRealSenseFaceID
{

class RealSenseFaceID : public virtual ::Ice::Proxy<RealSenseFaceID, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompRealSenseFaceID::UserDataList authenticate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_authenticate(_iceI_begin_authenticate(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_authenticate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_authenticate(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_authenticate(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_authenticate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_authenticate(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_authenticate(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_authenticate(const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_authenticatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_authenticate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_authenticate(const ::Ice::Context& context, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_authenticatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_authenticate(context, cb, cookie);
    }

    ::RoboCompRealSenseFaceID::UserDataList end_authenticate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_authenticate(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool enroll(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_enroll(_iceI_begin_enroll(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_enroll(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_enroll(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_enroll(const ::std::string& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_enroll(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_enroll(const ::std::string& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_enroll(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_enroll(const ::std::string& user, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_enrollPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_enroll(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_enroll(const ::std::string& user, const ::Ice::Context& context, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_enrollPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_enroll(user, context, cb, cookie);
    }

    bool end_enroll(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_enroll(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool eraseAll(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_eraseAll(_iceI_begin_eraseAll(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_eraseAll(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_eraseAll(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_eraseAll(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseAll(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_eraseAll(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseAll(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_eraseAll(const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_eraseAllPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseAll(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_eraseAll(const ::Ice::Context& context, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_eraseAllPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseAll(context, cb, cookie);
    }

    bool end_eraseAll(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_eraseAll(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool eraseUser(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_eraseUser(_iceI_begin_eraseUser(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_eraseUser(const ::std::string& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_eraseUser(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_eraseUser(const ::std::string& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseUser(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_eraseUser(const ::std::string& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseUser(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_eraseUser(const ::std::string& user, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_eraseUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseUser(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_eraseUser(const ::std::string& user, const ::Ice::Context& context, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_eraseUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_eraseUser(user, context, cb, cookie);
    }

    bool end_eraseUser(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_eraseUser(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompRealSenseFaceID::UserDataList getQueryUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getQueryUsers(_iceI_begin_getQueryUsers(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getQueryUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getQueryUsers(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getQueryUsers(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getQueryUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getQueryUsers(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getQueryUsers(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getQueryUsers(const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_getQueryUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getQueryUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getQueryUsers(const ::Ice::Context& context, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_getQueryUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getQueryUsers(context, cb, cookie);
    }

    ::RoboCompRealSenseFaceID::UserDataList end_getQueryUsers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getQueryUsers(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool startPreview(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_startPreview(_iceI_begin_startPreview(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_startPreview(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_startPreview(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startPreview(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startPreview(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startPreview(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startPreview(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startPreview(const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_startPreviewPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startPreview(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startPreview(const ::Ice::Context& context, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_startPreviewPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startPreview(context, cb, cookie);
    }

    bool end_startPreview(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_startPreview(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool stopPreview(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_stopPreview(_iceI_begin_stopPreview(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopPreview(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopPreview(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopPreview(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopPreview(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopPreview(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopPreview(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopPreview(const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_stopPreviewPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopPreview(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopPreview(const ::Ice::Context& context, const ::RoboCompRealSenseFaceID::Callback_RealSenseFaceID_stopPreviewPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopPreview(context, cb, cookie);
    }

    bool end_stopPreview(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopPreview(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompRealSenseFaceID
{

class RealSenseFaceID : public virtual ::Ice::Object
{
public:

    typedef RealSenseFaceIDPrx ProxyType;
    typedef RealSenseFaceIDPtr PointerType;

    virtual ~RealSenseFaceID();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual UserDataList authenticate(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_authenticate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool enroll(const ::std::string& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_enroll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool eraseAll(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_eraseAll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool eraseUser(const ::std::string& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_eraseUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual UserDataList getQueryUsers(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getQueryUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool startPreview(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_startPreview(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool stopPreview(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_stopPreview(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const RealSenseFaceID& lhs, const RealSenseFaceID& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const RealSenseFaceID& lhs, const RealSenseFaceID& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompRealSenseFaceID::UserData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompRealSenseFaceID::UserData, S>
{
    static void write(S* ostr, const ::RoboCompRealSenseFaceID::UserData& v)
    {
        ostr->write(v.userAuthenticated);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRealSenseFaceID::UserData, S>
{
    static void read(S* istr, ::RoboCompRealSenseFaceID::UserData& v)
    {
        istr->read(v.userAuthenticated);
    }
};

}
/// \endcond

namespace RoboCompRealSenseFaceID
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_authenticate.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_authenticate.
 */
template<class T>
class CallbackNC_RealSenseFaceID_authenticate : public Callback_RealSenseFaceID_authenticate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const UserDataList&);

    CallbackNC_RealSenseFaceID_authenticate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        UserDataList ret;
        try
        {
            ret = proxy->end_authenticate(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_authenticate.
 */
template<class T> Callback_RealSenseFaceID_authenticatePtr
newCallback_RealSenseFaceID_authenticate(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserDataList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_authenticate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_authenticate.
 */
template<class T> Callback_RealSenseFaceID_authenticatePtr
newCallback_RealSenseFaceID_authenticate(T* instance, void (T::*cb)(const UserDataList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_authenticate<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_authenticate.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_authenticate.
 */
template<class T, typename CT>
class Callback_RealSenseFaceID_authenticate : public Callback_RealSenseFaceID_authenticate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const UserDataList&, const CT&);

    Callback_RealSenseFaceID_authenticate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        UserDataList ret;
        try
        {
            ret = proxy->end_authenticate(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_authenticate.
 */
template<class T, typename CT> Callback_RealSenseFaceID_authenticatePtr
newCallback_RealSenseFaceID_authenticate(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserDataList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_authenticate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_authenticate.
 */
template<class T, typename CT> Callback_RealSenseFaceID_authenticatePtr
newCallback_RealSenseFaceID_authenticate(T* instance, void (T::*cb)(const UserDataList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_authenticate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_enroll.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_enroll.
 */
template<class T>
class CallbackNC_RealSenseFaceID_enroll : public Callback_RealSenseFaceID_enroll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RealSenseFaceID_enroll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_enroll(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_enroll.
 */
template<class T> Callback_RealSenseFaceID_enrollPtr
newCallback_RealSenseFaceID_enroll(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_enroll<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_enroll.
 */
template<class T> Callback_RealSenseFaceID_enrollPtr
newCallback_RealSenseFaceID_enroll(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_enroll<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_enroll.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_enroll.
 */
template<class T, typename CT>
class Callback_RealSenseFaceID_enroll : public Callback_RealSenseFaceID_enroll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RealSenseFaceID_enroll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_enroll(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_enroll.
 */
template<class T, typename CT> Callback_RealSenseFaceID_enrollPtr
newCallback_RealSenseFaceID_enroll(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_enroll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_enroll.
 */
template<class T, typename CT> Callback_RealSenseFaceID_enrollPtr
newCallback_RealSenseFaceID_enroll(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_enroll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseAll.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_eraseAll.
 */
template<class T>
class CallbackNC_RealSenseFaceID_eraseAll : public Callback_RealSenseFaceID_eraseAll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RealSenseFaceID_eraseAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_eraseAll(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseAll.
 */
template<class T> Callback_RealSenseFaceID_eraseAllPtr
newCallback_RealSenseFaceID_eraseAll(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_eraseAll<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseAll.
 */
template<class T> Callback_RealSenseFaceID_eraseAllPtr
newCallback_RealSenseFaceID_eraseAll(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_eraseAll<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseAll.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_eraseAll.
 */
template<class T, typename CT>
class Callback_RealSenseFaceID_eraseAll : public Callback_RealSenseFaceID_eraseAll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RealSenseFaceID_eraseAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_eraseAll(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseAll.
 */
template<class T, typename CT> Callback_RealSenseFaceID_eraseAllPtr
newCallback_RealSenseFaceID_eraseAll(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_eraseAll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseAll.
 */
template<class T, typename CT> Callback_RealSenseFaceID_eraseAllPtr
newCallback_RealSenseFaceID_eraseAll(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_eraseAll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseUser.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_eraseUser.
 */
template<class T>
class CallbackNC_RealSenseFaceID_eraseUser : public Callback_RealSenseFaceID_eraseUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RealSenseFaceID_eraseUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_eraseUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseUser.
 */
template<class T> Callback_RealSenseFaceID_eraseUserPtr
newCallback_RealSenseFaceID_eraseUser(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_eraseUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseUser.
 */
template<class T> Callback_RealSenseFaceID_eraseUserPtr
newCallback_RealSenseFaceID_eraseUser(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_eraseUser<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseUser.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_eraseUser.
 */
template<class T, typename CT>
class Callback_RealSenseFaceID_eraseUser : public Callback_RealSenseFaceID_eraseUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RealSenseFaceID_eraseUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_eraseUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseUser.
 */
template<class T, typename CT> Callback_RealSenseFaceID_eraseUserPtr
newCallback_RealSenseFaceID_eraseUser(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_eraseUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_eraseUser.
 */
template<class T, typename CT> Callback_RealSenseFaceID_eraseUserPtr
newCallback_RealSenseFaceID_eraseUser(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_eraseUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_getQueryUsers.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_getQueryUsers.
 */
template<class T>
class CallbackNC_RealSenseFaceID_getQueryUsers : public Callback_RealSenseFaceID_getQueryUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const UserDataList&);

    CallbackNC_RealSenseFaceID_getQueryUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        UserDataList ret;
        try
        {
            ret = proxy->end_getQueryUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_getQueryUsers.
 */
template<class T> Callback_RealSenseFaceID_getQueryUsersPtr
newCallback_RealSenseFaceID_getQueryUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserDataList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_getQueryUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_getQueryUsers.
 */
template<class T> Callback_RealSenseFaceID_getQueryUsersPtr
newCallback_RealSenseFaceID_getQueryUsers(T* instance, void (T::*cb)(const UserDataList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_getQueryUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_getQueryUsers.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_getQueryUsers.
 */
template<class T, typename CT>
class Callback_RealSenseFaceID_getQueryUsers : public Callback_RealSenseFaceID_getQueryUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const UserDataList&, const CT&);

    Callback_RealSenseFaceID_getQueryUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        UserDataList ret;
        try
        {
            ret = proxy->end_getQueryUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_getQueryUsers.
 */
template<class T, typename CT> Callback_RealSenseFaceID_getQueryUsersPtr
newCallback_RealSenseFaceID_getQueryUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserDataList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_getQueryUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_getQueryUsers.
 */
template<class T, typename CT> Callback_RealSenseFaceID_getQueryUsersPtr
newCallback_RealSenseFaceID_getQueryUsers(T* instance, void (T::*cb)(const UserDataList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_getQueryUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_startPreview.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_startPreview.
 */
template<class T>
class CallbackNC_RealSenseFaceID_startPreview : public Callback_RealSenseFaceID_startPreview_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RealSenseFaceID_startPreview(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_startPreview(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_startPreview.
 */
template<class T> Callback_RealSenseFaceID_startPreviewPtr
newCallback_RealSenseFaceID_startPreview(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_startPreview<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_startPreview.
 */
template<class T> Callback_RealSenseFaceID_startPreviewPtr
newCallback_RealSenseFaceID_startPreview(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_startPreview<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_startPreview.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_startPreview.
 */
template<class T, typename CT>
class Callback_RealSenseFaceID_startPreview : public Callback_RealSenseFaceID_startPreview_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RealSenseFaceID_startPreview(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_startPreview(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_startPreview.
 */
template<class T, typename CT> Callback_RealSenseFaceID_startPreviewPtr
newCallback_RealSenseFaceID_startPreview(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_startPreview<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_startPreview.
 */
template<class T, typename CT> Callback_RealSenseFaceID_startPreviewPtr
newCallback_RealSenseFaceID_startPreview(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_startPreview<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_stopPreview.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_stopPreview.
 */
template<class T>
class CallbackNC_RealSenseFaceID_stopPreview : public Callback_RealSenseFaceID_stopPreview_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RealSenseFaceID_stopPreview(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_stopPreview(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_stopPreview.
 */
template<class T> Callback_RealSenseFaceID_stopPreviewPtr
newCallback_RealSenseFaceID_stopPreview(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_stopPreview<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_stopPreview.
 */
template<class T> Callback_RealSenseFaceID_stopPreviewPtr
newCallback_RealSenseFaceID_stopPreview(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RealSenseFaceID_stopPreview<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_stopPreview.
 * Create a wrapper instance by calling ::RoboCompRealSenseFaceID::newCallback_RealSenseFaceID_stopPreview.
 */
template<class T, typename CT>
class Callback_RealSenseFaceID_stopPreview : public Callback_RealSenseFaceID_stopPreview_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RealSenseFaceID_stopPreview(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RealSenseFaceIDPrx proxy = RealSenseFaceIDPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_stopPreview(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_stopPreview.
 */
template<class T, typename CT> Callback_RealSenseFaceID_stopPreviewPtr
newCallback_RealSenseFaceID_stopPreview(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_stopPreview<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompRealSenseFaceID::RealSenseFaceID::begin_stopPreview.
 */
template<class T, typename CT> Callback_RealSenseFaceID_stopPreviewPtr
newCallback_RealSenseFaceID_stopPreview(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RealSenseFaceID_stopPreview<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
