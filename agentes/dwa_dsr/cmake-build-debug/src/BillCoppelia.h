//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `BillCoppelia.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __BillCoppelia_h__
#define __BillCoppelia_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompBillCoppelia
{

class BillCoppelia;
class BillCoppeliaPrx;

}

namespace RoboCompBillCoppelia
{

struct Pose
{
    float x;
    float y;
    float orientation;
    float vx;
    float vy;
    float vo;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, orientation, vx, vy, vo);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompBillCoppelia
{

class BillCoppelia : public virtual ::Ice::Object
{
public:

    using ProxyType = BillCoppeliaPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Pose getPose(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setSpeed(float adv, float rot, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setSpeed(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setTarget(float tx, float ty, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setTarget(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompBillCoppelia
{

class BillCoppeliaPrx : public virtual ::Ice::Proxy<BillCoppeliaPrx, ::Ice::ObjectPrx>
{
public:

    Pose getPose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompBillCoppelia::Pose>(true, this, &BillCoppeliaPrx::_iceI_getPose, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPoseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompBillCoppelia::Pose>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompBillCoppelia::Pose, P>(false, this, &BillCoppeliaPrx::_iceI_getPose, context);
    }

    ::std::function<void()>
    getPoseAsync(::std::function<void(::RoboCompBillCoppelia::Pose)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompBillCoppelia::Pose>(response, ex, sent, this, &RoboCompBillCoppelia::BillCoppeliaPrx::_iceI_getPose, context);
    }

    /// \cond INTERNAL
    void _iceI_getPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompBillCoppelia::Pose>>&, const ::Ice::Context&);
    /// \endcond

    void setSpeed(float adv, float rot, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &BillCoppeliaPrx::_iceI_setSpeed, adv, rot, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setSpeedAsync(float adv, float rot, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &BillCoppeliaPrx::_iceI_setSpeed, adv, rot, context);
    }

    ::std::function<void()>
    setSpeedAsync(float adv, float rot,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompBillCoppelia::BillCoppeliaPrx::_iceI_setSpeed, adv, rot, context);
    }

    /// \cond INTERNAL
    void _iceI_setSpeed(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, const ::Ice::Context&);
    /// \endcond

    void setTarget(float tx, float ty, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &BillCoppeliaPrx::_iceI_setTarget, tx, ty, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setTargetAsync(float tx, float ty, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &BillCoppeliaPrx::_iceI_setTarget, tx, ty, context);
    }

    ::std::function<void()>
    setTargetAsync(float tx, float ty,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompBillCoppelia::BillCoppeliaPrx::_iceI_setTarget, tx, ty, context);
    }

    /// \cond INTERNAL
    void _iceI_setTarget(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    BillCoppeliaPrx() = default;
    friend ::std::shared_ptr<BillCoppeliaPrx> IceInternal::createProxy<BillCoppeliaPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompBillCoppelia::Pose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompBillCoppelia::Pose, S>
{
    static void read(S* istr, ::RoboCompBillCoppelia::Pose& v)
    {
        istr->readAll(v.x, v.y, v.orientation, v.vx, v.vy, v.vo);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompBillCoppelia
{

using BillCoppeliaPtr = ::std::shared_ptr<BillCoppelia>;
using BillCoppeliaPrxPtr = ::std::shared_ptr<BillCoppeliaPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompBillCoppelia
{

class BillCoppelia;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< BillCoppelia>&);
::IceProxy::Ice::Object* upCast(BillCoppelia*);
/// \endcond

}

}

namespace RoboCompBillCoppelia
{

class BillCoppelia;
/// \cond INTERNAL
::Ice::Object* upCast(BillCoppelia*);
/// \endcond
typedef ::IceInternal::Handle< BillCoppelia> BillCoppeliaPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompBillCoppelia::BillCoppelia> BillCoppeliaPrx;
typedef BillCoppeliaPrx BillCoppeliaPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(BillCoppeliaPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompBillCoppelia
{

struct Pose
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float orientation;
    ::Ice::Float vx;
    ::Ice::Float vy;
    ::Ice::Float vo;
};

}

namespace RoboCompBillCoppelia
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_getPose.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_getPose.
 */
class Callback_BillCoppelia_getPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BillCoppelia_getPose_Base> Callback_BillCoppelia_getPosePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_setSpeed.
 */
class Callback_BillCoppelia_setSpeed_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BillCoppelia_setSpeed_Base> Callback_BillCoppelia_setSpeedPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_setTarget.
 */
class Callback_BillCoppelia_setTarget_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BillCoppelia_setTarget_Base> Callback_BillCoppelia_setTargetPtr;

}

namespace IceProxy
{

namespace RoboCompBillCoppelia
{

class BillCoppelia : public virtual ::Ice::Proxy<BillCoppelia, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompBillCoppelia::Pose getPose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPose(_iceI_begin_getPose(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPose(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::RoboCompBillCoppelia::Callback_BillCoppelia_getPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::Ice::Context& context, const ::RoboCompBillCoppelia::Callback_BillCoppelia_getPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose(context, cb, cookie);
    }

    ::RoboCompBillCoppelia::Pose end_getPose(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPose(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setSpeed(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setSpeed(_iceI_begin_setSpeed(adv, rot, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setSpeed(adv, rot, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float adv, ::Ice::Float rot, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeed(adv, rot, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeed(adv, rot, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float adv, ::Ice::Float rot, const ::RoboCompBillCoppelia::Callback_BillCoppelia_setSpeedPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeed(adv, rot, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context& context, const ::RoboCompBillCoppelia::Callback_BillCoppelia_setSpeedPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeed(adv, rot, context, cb, cookie);
    }

    void end_setSpeed(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setSpeed(::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setTarget(::Ice::Float tx, ::Ice::Float ty, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setTarget(_iceI_begin_setTarget(tx, ty, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setTarget(::Ice::Float tx, ::Ice::Float ty, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setTarget(tx, ty, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTarget(::Ice::Float tx, ::Ice::Float ty, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTarget(tx, ty, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTarget(::Ice::Float tx, ::Ice::Float ty, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTarget(tx, ty, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTarget(::Ice::Float tx, ::Ice::Float ty, const ::RoboCompBillCoppelia::Callback_BillCoppelia_setTargetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTarget(tx, ty, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTarget(::Ice::Float tx, ::Ice::Float ty, const ::Ice::Context& context, const ::RoboCompBillCoppelia::Callback_BillCoppelia_setTargetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTarget(tx, ty, context, cb, cookie);
    }

    void end_setTarget(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setTarget(::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompBillCoppelia
{

class BillCoppelia : public virtual ::Ice::Object
{
public:

    typedef BillCoppeliaPrx ProxyType;
    typedef BillCoppeliaPtr PointerType;

    virtual ~BillCoppelia();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Pose getPose(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setSpeed(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setSpeed(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setTarget(::Ice::Float tx, ::Ice::Float ty, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setTarget(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const BillCoppelia& lhs, const BillCoppelia& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const BillCoppelia& lhs, const BillCoppelia& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompBillCoppelia::Pose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompBillCoppelia::Pose, S>
{
    static void write(S* ostr, const ::RoboCompBillCoppelia::Pose& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.orientation);
        ostr->write(v.vx);
        ostr->write(v.vy);
        ostr->write(v.vo);
    }
};

template<typename S>
struct StreamReader< ::RoboCompBillCoppelia::Pose, S>
{
    static void read(S* istr, ::RoboCompBillCoppelia::Pose& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.orientation);
        istr->read(v.vx);
        istr->read(v.vy);
        istr->read(v.vo);
    }
};

}
/// \endcond

namespace RoboCompBillCoppelia
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_getPose.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_getPose.
 */
template<class T>
class CallbackNC_BillCoppelia_getPose : public Callback_BillCoppelia_getPose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Pose&);

    CallbackNC_BillCoppelia_getPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        BillCoppeliaPrx proxy = BillCoppeliaPrx::uncheckedCast(result->getProxy());
        Pose ret;
        try
        {
            ret = proxy->end_getPose(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_getPose.
 */
template<class T> Callback_BillCoppelia_getPosePtr
newCallback_BillCoppelia_getPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_getPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_getPose.
 */
template<class T> Callback_BillCoppelia_getPosePtr
newCallback_BillCoppelia_getPose(T* instance, void (T::*cb)(const Pose&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_getPose<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_getPose.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_getPose.
 */
template<class T, typename CT>
class Callback_BillCoppelia_getPose : public Callback_BillCoppelia_getPose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Pose&, const CT&);

    Callback_BillCoppelia_getPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        BillCoppeliaPrx proxy = BillCoppeliaPrx::uncheckedCast(result->getProxy());
        Pose ret;
        try
        {
            ret = proxy->end_getPose(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_getPose.
 */
template<class T, typename CT> Callback_BillCoppelia_getPosePtr
newCallback_BillCoppelia_getPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_getPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_getPose.
 */
template<class T, typename CT> Callback_BillCoppelia_getPosePtr
newCallback_BillCoppelia_getPose(T* instance, void (T::*cb)(const Pose&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_getPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_setSpeed.
 */
template<class T>
class CallbackNC_BillCoppelia_setSpeed : public Callback_BillCoppelia_setSpeed_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BillCoppelia_setSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setSpeed<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setSpeed<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setSpeed<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setSpeed<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_setSpeed.
 */
template<class T, typename CT>
class Callback_BillCoppelia_setSpeed : public Callback_BillCoppelia_setSpeed_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BillCoppelia_setSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T, typename CT> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setSpeed<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T, typename CT> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setSpeed<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T, typename CT> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setSpeed<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setSpeed.
 */
template<class T, typename CT> Callback_BillCoppelia_setSpeedPtr
newCallback_BillCoppelia_setSpeed(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setSpeed<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_setTarget.
 */
template<class T>
class CallbackNC_BillCoppelia_setTarget : public Callback_BillCoppelia_setTarget_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BillCoppelia_setTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setTarget<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setTarget<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setTarget<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BillCoppelia_setTarget<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 * Create a wrapper instance by calling ::RoboCompBillCoppelia::newCallback_BillCoppelia_setTarget.
 */
template<class T, typename CT>
class Callback_BillCoppelia_setTarget : public Callback_BillCoppelia_setTarget_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BillCoppelia_setTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T, typename CT> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setTarget<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T, typename CT> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setTarget<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T, typename CT> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setTarget<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompBillCoppelia::BillCoppelia::begin_setTarget.
 */
template<class T, typename CT> Callback_BillCoppelia_setTargetPtr
newCallback_BillCoppelia_setTarget(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BillCoppelia_setTarget<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
